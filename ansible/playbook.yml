---
- hosts: all
  become: yes

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Update system packages
      ansible.builtin.apt:
        state: present
        update_cache: yes

    - name: Create a user 'oklab' with a home directory
      ansible.builtin.user:
        name: oklab
        shell: /bin/bash
        create_home: yes
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa
        groups: www-data
        append: yes

    - name: Ensure remote_tmp directory exists with proper permissions
      ansible.builtin.file:
        path: /home/oklab/.ansible/tmp
        state: directory
        mode: "0775"
        owner: oklab
        group: oklab
      become: yes
      become_user: oklab

    - name: Handle system setup defaults
      block:
        - name: Install system packages
          ansible.builtin.apt:
            name: "{{ item }}"
            state: "present"
          with_items:
            - acl
            - git
            - git-lfs
            - gnupg2
            - python3
            - python3-venv
            - python3-pip
            - gdal-bin
            - osm2pgsql
            - unzip
            - libgdal-dev

        - name: Add postgresql signing key to keyring file
          ansible.builtin.get_url:
            url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
            dest: /etc/apt/keyrings/postgresql.asc
            mode: "0644"
            force: true

        - name: Add postgresql apt source
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64, signed-by=/etc/apt/keyrings/postgresql.asc] http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
            state: present

        - name: Install database packages
          ansible.builtin.apt: "name={{ item }} state=present update_cache=yes"
          with_items:
            - postgresql-16
            - postgresql-16-postgis-3
            - postgresql-client-16

        - name: "Create database user {{ db_user }}"
          postgresql_user:
            state: present
            name: "{{ db_user }}"
            password: "{{ db_password }}"
          become: yes
          become_user: postgres

        - name: Create database
          community.postgresql.postgresql_db:
            encoding: UTF-8
            name: "{{ db_name }}"
            owner: "{{ db_user }}"
            state: present
          become_user: postgres

        - name: Grant database user access to app db
          postgresql_privs:
            type: database
            database: postgres
            roles: PUBLIC
            privs: all
          become_user: postgres

        - name: Add PostgreSQL extensions to the database
          community.postgresql.postgresql_ext:
            name: "{{ item }}"
            db: "{{ db_name }}"
            login_user: postgres
            schema: public
            cascade: yes
          become_user: postgres
          loop:
            - postgis

  tasks:
    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /opt/git
        state: directory
        mode: "0755"
        owner: oklab
        group: oklab

    - name: Git checkout open-data-api all repositories
      ansible.builtin.git:
        repo: https://github.com/oklabflensburg/open-data-api.git
        dest: /opt/git/open-data-api
      become_user: oklab

    - name: Create dotenv file for open-data-api
      ansible.builtin.template:
        src: dotenv.j2
        dest: /opt/git/open-data-api/.env
        owner: oklab
        group: oklab
        mode: "0644"
      become_user: oklab

    - name: Ensure the virtual environment exists
      ansible.builtin.pip:
        requirements: /opt/git/open-data-api/requirements.txt
        virtualenv: /opt/git/open-data-api/venv
        virtualenv_command: "{{ ansible_python_interpreter }} -m venv"
      become_user: oklab

    - name: Ensure the virtual environment exists
      ansible.builtin.pip:
        requirements: /opt/git/open-data-api/tools/requirements.txt
        virtualenv: /opt/git/open-data-api/tools/venv
        virtualenv_command: "{{ ansible_python_interpreter }} -m venv"
      become_user: oklab

    - name: Git checkout open-social-map all repositories
      ansible.builtin.git:
        repo: https://github.com/oklabflensburg/open-social-map.git
        dest: /opt/git/open-social-map
      become_user: oklab

    - name: Create dotenv file for open-social-map
      ansible.builtin.template:
        src: dotenv.j2
        dest: /opt/git/open-social-map/.env
        owner: oklab
        group: oklab
        mode: "0644"
      become_user: oklab

    - name: Ensure the virtual environment exists
      ansible.builtin.pip:
        requirements: /opt/git/open-social-map/tools/requirements.txt
        virtualenv: /opt/git/open-social-map/tools/venv
        virtualenv_command: "{{ ansible_python_interpreter }} -m venv"
      become_user: oklab

    - name: Git checkout open-monuments-map all repositories
      ansible.builtin.git:
        repo: https://github.com/oklabflensburg/open-monuments-map.git
        dest: /opt/git/open-monuments-map
      become_user: oklab

    - name: Ensure the virtual environment exists
      ansible.builtin.pip:
        requirements: /opt/git/open-monuments-map/tools/requirements.txt
        virtualenv: /opt/git/open-monuments-map/tools/venv
        virtualenv_command: "{{ ansible_python_interpreter }} -m venv"
      become_user: oklab

    - name: Git checkout open-accident-map all repositories
      ansible.builtin.git:
        repo: https://github.com/oklabflensburg/open-accident-map.git
        dest: /opt/git/open-accident-map
      become_user: oklab

    - name: Ensure the virtual environment exists
      ansible.builtin.pip:
        requirements: /opt/git/open-accident-map/tools/requirements.txt
        virtualenv: /opt/git/open-accident-map/tools/venv
        virtualenv_command: "{{ ansible_python_interpreter }} -m venv"
      become_user: oklab

    - name: Find out if PostgreSQL is initialized
      ansible.builtin.stat:
        path: /etc/postgresql/16/main/pg_hba.conf
      register: postgres_data

    - name: Reload postgresql service
      ansible.builtin.systemd:
        name: postgresql.service
        state: reloaded
      when: not postgres_data.stat.exists

    - name: Set database user connection authentication method
      postgresql_pg_hba:
        dest: "/etc/postgresql/16/main/pg_hba.conf"
        contype: "{{ item.contype }}"
        databases: "{{ item.database }}"
        method: trust
        users: "{{ item.user }}"
        create: yes
        state: present
      loop:
        - { user: "oklab", contype: "host", database: "oklab" }
        - { user: "oklab", contype: "local", database: "oklab" }
        - { user: "postgres", contype: "host", database: "all" }
        - { user: "postgres", contype: "local", database: "all" }
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: Run SQL to create schema
      community.postgresql.postgresql_script:
        db: "{{ db_name }}"
        port: "{{ db_port }}"
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        path: "{{ item }}"
      with_items:
        - /opt/git/open-social-map/data/flensburg_sozialatlas.sql
        - /opt/git/open-social-map/data/flensburg_sozialatlas_meta.sql
        - /opt/git/open-monuments-map/data/denkmalliste_schema.sql
        - /opt/git/open-data-api/data/de_biomass_units_schema.sql
        - /opt/git/open-data-api/data/de_combustion_units_schema.sql
        - /opt/git/open-data-api/data/de_district_numbers_schema.sql
        - /opt/git/open-data-api/data/de_energy_meta_schema.sql
        - /opt/git/open-data-api/data/de_municipality_numbers_schema.sql
        - /opt/git/open-data-api/data/de_nuclear_units_schema.sql
        - /opt/git/open-data-api/data/de_solar_units_schema.sql
        - /opt/git/open-data-api/data/de_water_units_schema.sql
        - /opt/git/open-data-api/data/de_weather_stations_schema.sql
        - /opt/git/open-data-api/data/de_wind_units_schema.sql
        - /opt/git/open-data-api/data/dwd_abbreviations_schema.sql
        - /opt/git/open-data-api/data/dwd_station_reference_schema.sql
        - /opt/git/open-data-api/data/eu_country_codes_schema.sql
        - /opt/git/open-data-api/data/global_mosmix_stations_schema.sql
        - /opt/git/open-data-api/data/sh_archaeological_monument_schema.sql
      become_user: oklab

    - name: Run Python script with arguments
      ansible.builtin.command:
        argv:
          - /opt/git/open-social-map/tools/venv/bin/python3
          - /opt/git/open-social-map/tools/insert_districts.py
          - /opt/git/open-social-map/static/flensburg_stadtteile.geojson
      become_user: oklab

    - name: Run the script to insert municipality numbers
      ansible.builtin.command:
        argv:
          - /opt/git/open-data-api/tools/venv/bin/python3
          - /opt/git/open-data-api/tools/insert_municipality_number.py
          - "--env"
          - /opt/git/open-data-api/.env
          - "--target"
          - /opt/git/open-data-api/data
          - "--url"
          - https://www.xrepository.de/api/xrepository/urn:de:bund:destatis:bevoelkerungsstatistik:schluessel:ags_2024-10-31/download/AGS_2024-10-31.json
          - "--verbose"
      become_user: oklab

    - name: Run the script to insert energy metadata
      ansible.builtin.command:
        argv:
          - /opt/git/open-data-api/tools/venv/bin/python3
          - /opt/git/open-data-api/tools/insert_energy_meta.py
          - "--env"
          - /opt/git/open-data-api/.env
          - "--target"
          - /opt/git/open-data-api/data
          - "--url"
          - https://www.marktstammdatenregister.de/MaStR/Einheit/EinheitJson/GetFilterColumnsErweiterteOeffentlicheEinheitStromerzeugung
          - "--verbose"
      become_user: oklab

    - name: Check if VG25 zip file already exists
      ansible.builtin.stat:
        path: /tmp/vg25.utm32s.gpkg.zip
      register: vg25_zip_exists

    - name: Download administrative area dataset VG25
      ansible.builtin.get_url:
        url: https://daten.gdz.bkg.bund.de/produkte/vg/vg25_ebenen/aktuell/vg25.utm32s.gpkg.zip
        dest: /tmp/vg25.utm32s.gpkg.zip
      become_user: oklab
      register: vg25_download
      when: not vg25_zip_exists.stat.exists

    - name: Unzip administrative area dataset VG25
      ansible.builtin.unarchive:
        src: /tmp/vg25.utm32s.gpkg.zip
        dest: /tmp
        remote_src: yes
      become_user: oklab

    - name: Insert vg25_gem data into database
      ansible.builtin.command:
        cmd: ogr2ogr -f "PostgreSQL" PG:"dbname={{ db_name }} user={{ db_user }} port={{ db_port }} host={{ db_host }}" -lco GEOMETRY_NAME=geom -lco SPATIAL_INDEX=GIST -lco PRECISION=NO -t_srs EPSG:4326 -nlt MULTIPOLYGON -overwrite -update /tmp/daten/DE_VG25.gpkg vg25_gem
      become_user: oklab

    - name: Insert vg25_krs data into database
      ansible.builtin.command:
        cmd: ogr2ogr -f "PostgreSQL" PG:"dbname={{ db_name }} user={{ db_user }} port={{ db_port }} host={{ db_host }}" -lco GEOMETRY_NAME=geom -lco SPATIAL_INDEX=GIST -lco PRECISION=NO -t_srs EPSG:4326 -nlt MULTIPOLYGON -overwrite -update /tmp/daten/DE_VG25.gpkg vg25_krs
      become_user: oklab

    - name: Insert vg25_lan data into database
      ansible.builtin.command:
        cmd: ogr2ogr -f "PostgreSQL" PG:"dbname={{ db_name }} user={{ db_user }} port={{ db_port }} host={{ db_host }}" -lco GEOMETRY_NAME=geom -lco SPATIAL_INDEX=GIST -lco PRECISION=NO -t_srs EPSG:4326 -nlt MULTIPOLYGON -overwrite -update /tmp/daten/DE_VG25.gpkg vg25_lan
      become_user: oklab

    - name: Insert vg25_rbz data into database
      ansible.builtin.command:
        cmd: ogr2ogr -f "PostgreSQL" PG:"dbname={{ db_name }} user={{ db_user }} port={{ db_port }} host={{ db_host }}" -lco GEOMETRY_NAME=geom -lco SPATIAL_INDEX=GIST -lco PRECISION=NO -t_srs EPSG:4326 -nlt MULTIPOLYGON -overwrite -update /tmp/daten/DE_VG25.gpkg vg25_rbz
      become_user: oklab

    - name: Insert vg25_sta data into database
      ansible.builtin.command:
        cmd: ogr2ogr -f "PostgreSQL" PG:"dbname={{ db_name }} user={{ db_user }} port={{ db_port }} host={{ db_host }}" -lco GEOMETRY_NAME=geom -lco SPATIAL_INDEX=GIST -lco PRECISION=NO -t_srs EPSG:4326 -nlt MULTIPOLYGON -overwrite -update /tmp/daten/DE_VG25.gpkg vg25_sta
      become_user: oklab

    - name: Insert vg25_vwg data into database
      ansible.builtin.command:
        cmd: ogr2ogr -f "PostgreSQL" PG:"dbname={{ db_name }} user={{ db_user }} port={{ db_port }} host={{ db_host }}" -lco GEOMETRY_NAME=geom -lco SPATIAL_INDEX=GIST -lco PRECISION=NO -t_srs EPSG:4326 -nlt MULTIPOLYGON -overwrite -update /tmp/daten/DE_VG25.gpkg vg25_vwg
      become_user: oklab

    - name: Insert vg25_li data into database
      ansible.builtin.command:
        cmd: ogr2ogr -f "PostgreSQL" PG:"dbname={{ db_name }} user={{ db_user }} port={{ db_port }} host={{ db_host }}" -lco GEOMETRY_NAME=geom -lco SPATIAL_INDEX=GIST -lco PRECISION=NO -t_srs EPSG:4326 -nlt LINESTRING -overwrite -update /tmp/daten/DE_VG25.gpkg vg25_li
      become_user: oklab

  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted
